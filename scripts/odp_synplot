"""
this script makes plots of syntehny between different sets of chromosomes

useful for tracking synteny
"""

import pandas as pd

configfile: "odp_plotting_configs.yaml"

rule all:
    input:
        expand("synteny_plots/{plotparam}.pdf", plotparam = config["plot"])

def scale_0_1(old_min, old_max, old_value):
    new_min = 0
    new_max = 1
    new_value = ( (old_value - old_min) / (old_max - old_min) ) * (new_max - new_min) + new_min
    return new_value

rule plot_synteny:
    """
    plots synteny.
    """
    input:
        source_PTL = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][0]]["prot_to_loc"],
        source_blast = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][0]]["blasthits"],
        top_PTL = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][4]]["prot_to_loc"],
        top_blast = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][4]]["blasthits"],
        bottom_PTL = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][6]]["prot_to_loc"],
        bottom_blast = lambda wildcards: config["samples"][config["plot"][wildcards.plotparam][6]]["blasthits"],
    output:
        fig ="synteny_plots/{plotparam}.pdf"
    params:
        sourceLU = lambda wildcards: config["plot"][wildcards.plotparam][0],
        sourcechrom = lambda wildcards: config["plot"][wildcards.plotparam][1],
        topscope   = lambda wildcards: config["plot"][wildcards.plotparam][2],
        bottomscope   = lambda wildcards: config["plot"][wildcards.plotparam][3],
        topLU = lambda wildcards: config["plot"][wildcards.plotparam][4],
        topchrom = lambda wildcards: config["plot"][wildcards.plotparam][5],
        bottomLU = lambda wildcards: config["plot"][wildcards.plotparam][6],
        bottomchrom = lambda wildcards: config["plot"][wildcards.plotparam][7],
        color = lambda wildcards: config["plot"][wildcards.plotparam][8]
    threads: 1
    run:
        # magic numbers
        sidescaling = 1.05 # how big to make the plotting length relative to the actual size
        roundtonearest = 10000
        percent_gaps = 0.05
        # first get a list of the genes that we need to consider
        sourcedf = pd.read_csv(input.source_blast, sep = "\t")
        sourcesubdf = sourcedf.loc[sourcedf["scaf"] == params.sourcechrom, ]
        topGenesToConsider = sourcesubdf.loc[pd.notnull(sourcesubdf[params.topLU]), params.topLU]
        bottomGenesToConsider = sourcesubdf.loc[pd.notnull(sourcesubdf[params.bottomLU]), params.bottomLU]

        top_gene_scope = set()
        bottom_gene_scope = set()
        for entry in params.topscope:
            topsubdf = sourcedf.loc[sourcedf["scaf"] == entry, ]
            thesegenes = topsubdf.loc[pd.notnull(topsubdf[params.topLU]), params.topLU]
            for thisgene in thesegenes:
                top_gene_scope.add(thisgene)
        for entry in params.bottomscope:
            topsubdf = sourcedf.loc[sourcedf["scaf"] == entry, ]
            thesegenes = topsubdf.loc[pd.notnull(topsubdf[params.bottomLU]), params.bottomLU]
            for thisgene in thesegenes:
                bottom_gene_scope.add(thisgene)
        print(top_gene_scope)
        print(bottom_gene_scope)

        # get the coords of what we're looking up
        params_dict = {"top":   {"blast": input.top_blast,
                                 "genesToColor": topGenesToConsider,
                                 "geneScope": top_gene_scope,
                                 "chrom":  params.topchrom,
                                 "lookup": params.topLU,
                                 "plotstart": None,
                                 "plotstop:": None,
                                 "plotdf": None},
                       "bottom": {"blast": input.bottom_blast,
                                  "genesToColor": bottomGenesToConsider,
                                  "geneScope": bottom_gene_scope,
                                  "chrom":  params.bottomchrom,
                                  "lookup": params.bottomLU}}
        for side in params_dict:
            df = pd.read_csv(params_dict[side]["blast"], sep = "\t")
            lookup = params_dict[side]["lookup"]
            genestoconsider = pd.Series(list(params_dict[side]["geneScope"]))
            subdf = df.loc[(df[lookup].isin(genestoconsider)) & (df["scaf"] == params_dict[side]["chrom"]), ]
            subcenter = subdf.iloc[0]["start"] + int((subdf.iloc[-1]["stop"] - subdf.iloc[0]["start"])/2)
            subdiff = int(subdf.iloc[-1]["stop"] - subdf.iloc[0]["start"])
            params_dict[side]["plotstart"] = int((subcenter - (subdiff/2))/roundtonearest) * roundtonearest
            params_dict[side]["plotstop"]  = (int((subcenter + (subdiff/2))/roundtonearest) * roundtonearest) + roundtonearest
            plotdf = df.loc[(df["start"] >= subdf.iloc[0]["start"]) \
                            & (df["stop"] <= subdf.iloc[-1]["stop"]) \
                            & (df["scaf"] == params_dict[side]["chrom"]), ]
            plotdf.reset_index(drop=True, inplace = True)
            num_boxes = len(plotdf)
            plotting_length = params_dict[side]["plotstop"] - params_dict[side]["plotstart"]
            boxes_length = subdf.iloc[-1]["stop"] - subdf.iloc[0]["start"]
            size_of_gap = (percent_gaps/(num_boxes - 1)) * (boxes_length/plotting_length)
            size_of_box = ((1-percent_gaps)/num_boxes) * (boxes_length/plotting_length)
            # everything should be scaled between 0 and 1
            boxes_start = scale_0_1(
                params_dict[side]["plotstart"],
                params_dict[side]["plotstop"],
                subdf.iloc[0]["start"])
            plotdf["boxstart"] = None
            plotdf["boxstop"]  = None
            plotdf["color"]  = None
            position = boxes_start
            for index, row in plotdf.iterrows():
                plotdf.loc[index,"boxstart"] = position
                position += size_of_box
                plotdf.loc[index,"boxstop"] = position
                position += size_of_gap
                if row[params_dict[side]["lookup"]] in set(params_dict[side]["genesToColor"]):
                    plotdf.loc[index, "color"] = params.color
                else:
                    plotdf.loc[index, "color"] = "#333333"
            #params_dict[side]["plotdf"]
            print(side)
            print(plotdf)
            #print(params_dict[side]["plotdf"])
            params_dict[side]["plotdf"] = plotdf

        # we have everything we need to plot now, this is the plotting mantra
        import seaborn as sns; sns.set()
        import matplotlib
        import matplotlib.patches as mplpatches
        import matplotlib.pyplot as plt
        import matplotlib.ticker as ticker
        #import matplotlib.patches as mplpatches
        from matplotlib.ticker import StrMethodFormatter, NullFormatter
        import numpy as np
        # set seaborn stuff
        #sns.set(rc={'text.usetex' : True})
        sns.set_style("ticks", {'font.family': ['sans-serif'],
                                    'font.sans-serif': ['Helvetica'],
                                    'grid.color': '.95'})
        # Preserve the vertical order of embedded images:
        matplotlib.rcParams['image.composite_image'] = False
        # text as font in pdf
        matplotlib.rcParams['pdf.fonttype'] = 42
        matplotlib.rcParams['ps.fonttype'] = 42
        # now plot our stuff a scatter plot
        figWidth = 8
        figHeight = 8
        plt.figure(figsize=(figWidth,figHeight))
        #set the panel dimensions
        panelWidth = 5
        panelHeight = 4
        dpanel_width = 0.25
        #find the margins to center the panel in figure
        leftMargin = (figWidth - panelWidth)/2
        bottomMargin = ((figHeight - panelHeight)/2)
        panel1 = plt.axes([leftMargin/figWidth, #left
                             bottomMargin/figHeight,    #bottom
                             panelWidth/figWidth,   #width
                             panelHeight/figHeight])     #height
        panel1.tick_params(axis='both',which='both',
                            bottom=False, labelbottom=True,
                            left=False, labelleft=True,
                            right=False, labelright=False,
                            top=False, labeltop=False)

        # lines plotted between 0 and 1
        # the labels to the left of the lines
        panel1.set_xlim([-0.05, 1.05])
        # bottom on 1, top on 3
        panel1.set_ylim([0, 4])

        # plot the horizontal lines for the genes
        xs = [-0.025, 1.025]
        panel1.plot(xs, [1,1], color = "black", ls = "-")
        panel1.plot(xs, [3,3], color = "black", ls = "-")

        # plot the tick labels of the chroms
        panel1.set_yticks([1,3])
        panel1.set_yticklabels(
            [params_dict["bottom"]["lookup"],
             params_dict["top"]["lookup"]], fontsize=8)

        # now plot the boxes
        rect_height = 0.25
        for side in params_dict:
            if side == "bottom":
                y_pos = 1-(rect_height/2)
            elif side == "top":
                y_pos = 3-(rect_height/2)
            for index, row in params_dict[side]["plotdf"].iterrows():
                x_pos = row["boxstart"]
                height = rect_height
                width = size_of_box
                rectangle1=mplpatches.Rectangle((x_pos,y_pos),width,height,
                                                linewidth=0,\
                                                linestyle='-',\
                                                edgecolor='black',\
                                                facecolor=row["color"])
                panel1.add_patch(rectangle1)

        # now plot the lines:
        bot = params_dict["bottom"]["plotdf"]
        for index, row in params_dict["top"]["plotdf"].iterrows():
            # if there is a color we know to plot it
            if row["color"] == params.color:
                top_x = row["boxstart"] + ((row["boxstop"] - row["boxstart"])/2)
                top_y = 3
                topspecies = params_dict["top"]["lookup"]
                botspecies = params_dict["bottom"]["lookup"]
                topgene = row[topspecies]
                if topgene in bot[topspecies].values:
                    bottomgene = bot.loc[bot[topspecies] == topgene, botspecies].values[0]
                    bottom_start = bot.loc[bot[botspecies] == bottomgene, "boxstart"].values[0]
                    bottom_stop = bot.loc[bot[botspecies] == bottomgene, "boxstop"].values[0]
                    bottom_x = bottom_start + ((bottom_stop - bottom_start)/2)
                    bottom_y = 1
                    xs = [top_x, bottom_x]
                    ys = [top_y, bottom_y]
                    panel1.plot(xs, ys, color = "black", ls = "-")
        plt.savefig(output.fig)
