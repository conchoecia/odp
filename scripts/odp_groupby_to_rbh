"""
This script takes the grouby RBH hits file, to which a group column has
  been added. This script unwraps that file into a row-by-row
  reciprocal best hit file.

the input file must be named:
  {sample1}_{sample2}_{sampleN}_reciprocal_best_hits.*.groupby

... where sample1, sample2, sampleN is the sample name in the config.

There can be as many samples as you'd like.
"""

import ast
from Bio import SeqIO
from Bio import SeqRecord
from Bio import Seq
from itertools import groupby
from itertools import product
import math
import numpy as np
import odp_functions as OdpF
from operator import itemgetter
import pandas as pd
import statistics

configfile: "config.yaml"

config["tool"] = "odp_groupby_to_rbh"

OdpF.check_legality(config)

if "groupby_files" not in config:
    raise IOError("You must specify 'groupby_files' in config")

# come up with all of the analyses
analyses = []
for thisfile in config["groupby_files"]:
    species_string = thisfile.split("/")[-1].split("_reciprocal_best_hits")[0]
    print(species_string)
    num_species = len(species_string.split("_"))
    if num_species < 3:
        raise IOError("There must be more than two species.")
    analyses.append(species_string)

rule all:
    input:
        # just the unwrapped data
        expand(config["tool"] + "/output/{sp}.unwrapped.rbh",
               sp = analyses)

rule unwrap_RBH_file_with_group_column:
    input:
        RBH_files = config["groupby_files"]
    output:
        RBH_unwrapped = expand(config["tool"] + "/output/{sp}.unwrapped.rbh",
                               sp = analyses)
    params:
        prefix = config["tool"] + "/output/"
    threads: 1
    run:
        for thisfile in input.RBH_files:
            species_string = thisfile.split("/")[-1].split("_reciprocal_best_hits")[0]
            print(species_string)
            df = pd.read_csv(thisfile, sep = "\t", index_col = None)

            # get all the species in the dataframe
            complete_species_list = [x.split("_")[0] for x in df.columns
                                     if x.endswith("_scaf")]
            filename_species_list = species_string.split("_")
            # check that species list matches the species_string
            assert species_string == "_".join(complete_species_list)

            RBH_entries = []
            for index, row in df.iterrows():
                RBH_list = ast.literal_eval(row["RBH"])
                species_to_gene_list = {}
                species_to_gene_pos  = {}
                species_to_gene_scaf = {}
                # make lookup tables
                for thisspecies in complete_species_list:
                    # gene_col
                    colname = "{}_gene".format(thisspecies)
                    species_to_gene_list[thisspecies] = ast.literal_eval(row[colname])
                    # pos_col
                    colname = "{}_pos".format(thisspecies)
                    species_to_gene_pos[thisspecies] = ast.literal_eval(row[colname])
                    # handle scaf differently depending on what this is
                    colname = "{}_scaf".format(thisspecies)
                    if thisspecies in filename_species_list:
                        species_to_gene_scaf[thisspecies] = [row[colname]] * len(species_to_gene_pos[thisspecies])
                    else:
                        species_to_gene_scaf[thisspecies] = ast.literal_eval(row[colname])
                for i in range(len(RBH_list)):
                    thisgroup = row["gene_group"]
                    thisentry = {"RBH": RBH_list[i],
                                 "gene_group": thisgroup,
                                 "count":      row["count"],
                                 "alpha":      row["alpha"],
                                 "alpha_type": row["alpha_type"]}
                    for thisspecies in complete_species_list:
                        # get col names
                        scafcol = "{}_scaf".format(thisspecies)
                        genecol = "{}_gene".format(thisspecies)
                        poscol  = "{}_pos".format(thisspecies)
                        thisentry[scafcol] = species_to_gene_scaf[thisspecies][i]
                        thisentry[genecol] = species_to_gene_list[thisspecies][i]
                        thisentry[poscol]  = species_to_gene_pos[thisspecies][i]
                    RBH_entries.append(thisentry)

            unwrapped = pd.DataFrame(RBH_entries)
            unwrapped = unwrapped[[x for x in unwrapped.columns
                                   if x not in ["count", "alpha", "alpha_type"]]]
            outfile = params.prefix + species_string + ".unwrapped.rbh"
            unwrapped.to_csv(outfile, sep="\t", na_rep = "nan", index = False)
